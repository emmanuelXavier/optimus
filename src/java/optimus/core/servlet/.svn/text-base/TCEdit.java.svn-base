/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package optimus.core.servlet;


import java.io.*;
import java.lang.reflect.Field;
import java.sql.SQLException;
import java.util.List;
import javax.servlet.*;
import javax.servlet.http.*;
import optimus.core.TCriterio;
import optimus.core.TStrategyContexto;
import optimus.core.TUtils;
import optimus.core.dao.TGenericDAO;



/**
 *
 * @author Analista SÃªnior
 */
public class TCEdit extends HttpServlet {

    private TGenericDAO beans;
    private Field[] fields;
    private String[] campos;
    private String tabela;
    private String filtro;
    private String Url;

    public String getFiltro() {
        return filtro;
    }

    public void setFiltro(String filtro) {
        this.filtro = filtro;
    }

    public String getTabela() {
        return tabela;
    }

    public void setTabela(String tabela) {
        this.tabela = tabela;
    }

    public String getUrl() {
        return Url;
    }

    public void setUrl(String Url) {
        this.Url = Url + "?modoForm=alterar";
    }
    public void setUrl2(String Url) {
        this.Url = Url + "&modoForm=alterar";
    }

    private void construtora(String classe) {

        TStrategyContexto strategy = new TStrategyContexto(classe);
        this.beans = (TGenericDAO) strategy.factoryStrategy();

    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            //cria a classe passada como parametro
            this.construtora(request.getParameter("classe"));

            //setando atributos do filtro e do envio
            this.setFiltro(request.getParameter("id"));
            this.setTabela(request.getParameter("tabela"));
            if (request.getParameter("url").contains("?")) {
                this.setUrl2(request.getParameter("url"));
            } else {
                this.setUrl(request.getParameter("url"));
            }


            //Criando o criterio da consuta
            TCriterio criterio = new TCriterio();
            criterio.add("id", "=", this.filtro);

            List<Object> obj = this.beans.select(criterio.getFilter(), tabela, "");

            for (int indice = 0; indice < obj.size(); indice++) {
                Object objeto = obj.get(indice);

                //recebe os atributos do classe
                this.fields = objeto.getClass().getDeclaredFields();

                //tornando acessivel os atributos do objeto e os colocando na string url.
                for (int indiceAtributo = 0; indiceAtributo < objeto.getClass().getDeclaredFields().length; indiceAtributo++) {
                    //acessivel
                    this.fields[indiceAtributo].setAccessible(true);
                    //inserindo na url.
                    if (this.fields[indiceAtributo].get(objeto) != null) {
                        if (this.fields[indiceAtributo].getName().equals("data") || this.fields[indiceAtributo].getName().toString().substring(0, 2).equals("dt")) {
                            this.Url += "&" + this.fields[indiceAtributo].getName() + "=" + TUtils.formataData(this.fields[indiceAtributo].get(objeto).toString(), 1);
                        }else{
                            this.Url += "&" + this.fields[indiceAtributo].getName() + "=" + this.fields[indiceAtributo].get(objeto).toString();
                        }
                    } else {
                        this.Url += "&" + this.fields[indiceAtributo].getName() + "=" + "";
                    }

                }
            }

           // System.out.print(this.Url);
            response.sendRedirect(this.Url);
        } catch (IllegalArgumentException ex) {
           // Logger.getLogger(TCEdit.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
           // Logger.getLogger(TCEdit.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
           // Logger.getLogger(TCEdit.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }



    }

    public String getServletInfo() {
        return "Short description";
    }
    // </editor-fold>
}
