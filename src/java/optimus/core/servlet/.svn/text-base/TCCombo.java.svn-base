/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package optimus.core.servlet;

import java.io.*;
import java.lang.reflect.Field;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.*;
import javax.servlet.http.*;
import optimus.core.TFilter;
import optimus.core.TStrategyContexto;
import optimus.core.dao.TGenericDAO;

/**
 *
 * @author Administrador
 */
public class TCCombo extends HttpServlet {

    protected TGenericDAO beans;
    protected Field[] fields;
    protected String[] campos;

    protected void construtora(String classe) {

        TStrategyContexto strategy = new TStrategyContexto(classe);
        this.beans = (TGenericDAO) strategy.factoryStrategy();

    }

    /** 
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {

            this.construtora(request.getParameter("classe"));
            response.setContentType("text/html");
            PrintWriter out = null;
            out = response.getWriter();

            String[] operador = new String[3];
            String[] criterio = new String[3];
            String[] campo = new String[3];
            String[] valor = new String[3];

            //especificando filtros
            criterio[0] = "";
            campo[0] = "";
            operador[0] = "";
            valor[0] = "";
            criterio[1] = "";
            campo[1] = "";
            operador[1] = "";
            valor[1] = "";
            criterio[2] = "";
            campo[2] = "";
            operador[2] = "";
            valor[2] = "";

            String limit = "";

            if (request.getParameter("campo") != null) {
                criterio[0] = " where ";
                campo[0] = "  " + request.getParameter("campo") + "  ";
                operador[0] = " = ";
                valor[0] = "'" + request.getParameter("valor") + "'";
            } else if ((request.getParameter("semLimite") != null) && (request.getParameter("semLimite").equals("true") == false)) {

                limit = " order by id ";
            }
            if (request.getParameter("campo2") != null) {
                criterio[1] = " and ";
                campo[1] = "  " + request.getParameter("campo2") + "  ";
                operador[1] = " = ";
                valor[1] = "'" + request.getParameter("valor2") + "'";
            }
            if (request.getParameter("campo3") != null) {
                criterio[2] = " and ";
                campo[2] = "  " + request.getParameter("campo3") + "  ";
                operador[2] = " = ";
                valor[2] = "'" + request.getParameter("valor3") + "'";
            }

            if (request.getParameter("campo4") != null) {
                criterio[1] = " or ";
                campo[1] = "  " + request.getParameter("campo4") + "  ";
                operador[1] = " = ";
                valor[1] = "'" + request.getParameter("valor4") + "'";
            }

            if (request.getParameter("order") != null) {
                limit = request.getParameter("order").toString();
            }

            ResultSet rs = null;

            rs = (ResultSet) this.beans.select(request.getParameter("tabela"), new TFilter(criterio, campo, operador, valor), limit);

            //vetor de String com o total de atributos da classe
            this.campos = new String[this.beans.getClass().getDeclaredFields().length];

            //recebe os atributos do classe
            this.fields = this.beans.getClass().getDeclaredFields();

            //
            String s = "";
            if (request.getParameter("selected") != null) {
                s = request.getParameter("selected");
            }

            if (request.getParameter("sel") == null) {
                out.println("<option value='0'>Selecione...</option>");
            }

            String registro = "";
            if ((request.getParameter("unico") != null) && (request.getParameter("unico").equals("true"))) {
                while (rs.next()) {
                    if (registro.equals(rs.getString(this.fields[1].getName())) == false) {

                        if (rs.getString(this.fields[0].getName()).equals(s)) {
                            out.println("<option selected value='" + rs.getInt(this.fields[0].getName()) + "'>" + rs.getString(this.fields[1].getName()) + "</option>");
                        } else {
                            out.println("<option value='" + rs.getInt(this.fields[0].getName()) + "'>" + rs.getString(this.fields[1].getName()) + "</option>");
                        }
                    }
                    registro = rs.getString(this.fields[1].getName());
                }
            } else {
                //adicionado para permitir pegar um field especifico para o value do combo 
                //(Nonilton Alves)12/02/2010
                //Esta alteração esta em uso no CadTurmaEtapa.jsp para auxiliar na criação dinamica dos nomes da turma
                if (request.getParameter("field") != null) {
                    int field = Integer.parseInt(request.getParameter("field"));
                    while (rs.next()) {
                        if (rs.getString(this.fields[0].getName()).equals(s)) {
                            out.println("<option selected value='" + rs.getInt(this.fields[0].getName()) + "'>" + rs.getString(this.fields[1].getName()) + "</option>");
                        } else {
                            out.println("<option value='" + rs.getInt(this.fields[0].getName()) + "'>" + + rs.getInt(this.fields[field].getName()) + "-"+rs.getString(this.fields[1].getName()) + "</option>");
                        }

                    }
                    //---------------------------fim modificação
                } else {
                    while (rs.next()) {
                        if (rs.getString(this.fields[0].getName()).equals(s)) {
                            out.println("<option selected value='" + rs.getInt(this.fields[0].getName()) + "'>" + rs.getString(this.fields[1].getName()) + "</option>");
                        } else {
                            out.println("<option value='" + rs.getInt(this.fields[0].getName()) + "'>" + rs.getString(this.fields[1].getName()) + "</option>");
                        }
                    }
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(TCCombo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(TCCombo.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    /** 
     * Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
    // </editor-fold>
}
